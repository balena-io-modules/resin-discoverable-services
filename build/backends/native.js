// Generated by CoffeeScript 1.11.1
(function() {
  var NativeServiceBrowser, Promise, bonjour;

  Promise = require('bluebird');

  bonjour = require('bonjour');

  NativeServiceBrowser = (function() {
    function NativeServiceBrowser(timeout1) {
      this.timeout = timeout1;
      this.findInstance = bonjour();
    }

    NativeServiceBrowser.prototype.find = function(type, protocol, subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      return new Promise((function(_this) {
        return function(resolve) {
          var browser, foundServices;
          foundServices = [];
          browser = _this.findInstance.find({
            type: type,
            subtypes: subtypes,
            protocol: protocol
          }, function(service) {
            return foundServices.push(service);
          });
          return setTimeout(function() {
            browser.stop();
            return resolve(foundServices);
          }, _this.timeout);
        };
      })(this));
    };

    NativeServiceBrowser.prototype.isAvailable = function() {
      return Promise.resolve(true);
    };

    NativeServiceBrowser.prototype.destroy = function() {
      return this.findInstance.destroy();
    };

    return NativeServiceBrowser;

  })();

  exports.get = function(timeout) {
    if (timeout == null) {
      timeout = 1000;
    }
    return Promise.resolve(new NativeServiceBrowser(timeout)).disposer(function(serviceBrowser) {
      return serviceBrowser.destroy();
    });
  };

  exports.isAvailable = function() {
    return Promise.resolve(true);
  };

}).call(this);
