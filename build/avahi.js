// Generated by CoffeeScript 1.11.1
(function() {
  var AVAHI_SERVICE_NAME, DONE_SIGNAL, FAIL_SIGNAL, IF_UNSPEC, NEW_SIGNAL, PROTO_UNSPEC, Promise, dbus, findAvailableServices, getAvahiServer, getDbus, matchSignal, onSignal;

  Promise = require('bluebird');

  dbus = require('dbus-native');

  AVAHI_SERVICE_NAME = 'org.freedesktop.Avahi';

  IF_UNSPEC = -1;

  PROTO_UNSPEC = -1;

  NEW_SIGNAL = 'ItemNew';

  DONE_SIGNAL = 'AllForNow';

  FAIL_SIGNAL = 'Failure';

  getDbus = function() {
    return Promise["try"](function() {
      return dbus.systemBus();
    }).disposer(function(bus) {
      var ref;
      return bus != null ? (ref = bus.connection) != null ? ref.end() : void 0 : void 0;
    });
  };

  getAvahiServer = function(bus) {
    var service;
    service = bus.getService(AVAHI_SERVICE_NAME);
    return Promise.fromCallback(function(callback) {
      return service.getInterface('/', 'org.freedesktop.Avahi.Server', callback);
    });
  };

  matchSignal = function(bus, path, method) {
    return Promise.fromCallback(function(callback) {
      return bus.addMatch("type='signal',path='" + path + "',member='" + method + "'", callback);
    });
  };

  onSignal = function(bus, serviceBrowser, signal, callback) {
    var signalFullName;
    signalFullName = bus.mangle(serviceBrowser.name, 'org.freedesktop.Avahi.ServiceBrowser', signal);
    return bus.signals.on(signalFullName, function(messageBody) {
      return callback(messageBody);
    });
  };

  findAvailableServices = function(bus, avahiServer, arg) {
    var identifier, protocol, subtypes, type;
    type = arg.type, protocol = arg.protocol, subtypes = arg.subtypes;
    identifier = "_" + type + "._" + protocol;
    return Promise.fromCallback(function(callback) {
      return avahiServer.ServiceBrowserNew(IF_UNSPEC, PROTO_UNSPEC, identifier, 'local', 0, callback);
    }).then(function(serviceBrowserPath) {
      return Promise.fromCallback(function(callback) {
        return bus.getObject(AVAHI_SERVICE_NAME, serviceBrowserPath, callback);
      });
    }).then(function(serviceBrowser) {
      return Promise.all([NEW_SIGNAL, DONE_SIGNAL, FAIL_SIGNAL].map(function(signalName) {
        return matchSignal(bus, serviceBrowser.name, signalName);
      })).then(function() {
        return new Promise(function(resolve, reject) {
          var services;
          services = [];
          onSignal(bus, serviceBrowser, NEW_SIGNAL, function(message) {
            return console.log('new item:', message);
          });
          onSignal(bus, serviceBrowser, DONE_SIGNAL, function(message) {
            console.log('done');
            return resolve(services);
          });
          return onSignal(bus, serviceBrowser, FAIL_SIGNAL, function(message) {
            console.log('error');
            return reject(new Error(message));
          });
        });
      }).then(function(services) {
        return services;
      })["finally"](function() {});
    });
  };


  /*
   * @summary Detects whether a D-Bus Avahi connection is possible
   * @function
   * @public
   *
   * @description
   * If the promise returned by this method resolves to true, other Avahi methods
   * should work. If it doesn't, they definitely will not.
   *
   * @fulfil {boolean} - Is an Avahi connection possible
   * @returns {Promise}
   *
   * @example
   * avahi.isAvailable().then((canUseAvahi) => {
   *   if (canUseAvahi) { ... }
   * })
   */

  exports.isAvailable = function() {
    return Promise.using(getDbus(), function(bus) {
      return getAvahiServer(bus)["return"](true);
    }).catchReturn(false);
  };

  exports.find = function(arg) {
    var protocol, ref, subtypes, type;
    type = arg.type, protocol = arg.protocol, subtypes = (ref = arg.subtypes) != null ? ref : [];
    return Promise.using(getDbus(), function(bus) {
      return getAvahiServer(bus).then(function(avahi) {
        return findAvailableServices(bus, avahi, {
          type: type,
          protocol: protocol,
          subtypes: subtypes
        });
      }).then(function(services) {
        return console.log(services);
      });
    });
  };

  exports.publish = function(arg) {
    var name, port, protocol, ref, subtypes, type;
    name = arg.name, port = arg.port, type = arg.type, protocol = arg.protocol, subtypes = (ref = arg.subtypes) != null ? ref : [];
    return using(getDbus(), function(bus) {
      return getAvahiServer(bus).then(function(avahi) {
        return ' avahi.publish(...)';
      });
    });
  };

}).call(this);
